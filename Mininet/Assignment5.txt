5.1

Dijkstra:
Initialize:
#1(weight=0,prev=L)
#2(weight=Inf,prev=null)
#3(weight=Inf,prev=null)
#4(weight=Inf,prev=null)
#5(weight=Inf,prev=null)
#6(weight=Inf,prev=null)
#7(weight=Inf,prev=null)
#8(weight=Inf,prev=null)

Extract #1(weight=0,prev=L)
Relax 2
Relax 3

Extract #2(weight=2,prev=1)
Relax 1
Relax 4
Relax 5

Extract #3(weight=2,prev=1)
Relax 1
Relax 4
Relax 5

Extract #5(weight=3,prev=2)
Relax 2
Relax 3
Relax 6
Relax 7

Extract #4(weight=4,prev=3)
Relax 2
Relax 3
Relax 6
Relax 7

Extract #6(weight=5,prev=5)
Relax 4
Relax 5
Relax 8

Extract #7(weight=5,prev=4)
Relax 4
Relax 5
Relax 8

Extract #8(weight=6,prev=7)
Relax 6
Relax 7

Final result:
#1(weight=0,prev=L)
#2(weight=2,prev=1)
#3(weight=2,prev=1)
#4(weight=4,prev=3)
#5(weight=3,prev=2)
#6(weight=5,prev=5)
#7(weight=5,prev=4)
#8(weight=6,prev=7)


Bellman-Ford:

Initialize:
u	v	w
1	2	2
2	1	2
1	3	2
3	1	2
2	4	7
4	2	7
2	5	1
5	2	1
3	4	2
4	3	2
3	5	5
5	3	5
4	6	3
6	4	3
4	7	1
7	4	1
5	6	2
6	5	2
5	7	8
7	5	8
6	8	9
8	6	9
7	8	1
8	7	1

Initialize:
#1(weight=0,prev=L)
#2(weight=Inf,prev=null)
#3(weight=Inf,prev=null)
#4(weight=Inf,prev=null)
#5(weight=Inf,prev=null)
#6(weight=Inf,prev=null)
#7(weight=Inf,prev=null)
#8(weight=Inf,prev=null)

loop #1
Relaxed #2(weight=2,prev=1)
Relaxed #3(weight=2,prev=1)
Relaxed #4(weight=9,prev=2)
Relaxed #5(weight=3,prev=2)
Relaxed #4(weight=4,prev=3)
Relaxed #6(weight=7,prev=4)
Relaxed #7(weight=5,prev=4)
Relaxed #6(weight=5,prev=5)
Relaxed #8(weight=14,prev=6)
Relaxed #8(weight=6,prev=7)
result:
#1(weight=0,prev=L)
#2(weight=2,prev=1)
#3(weight=2,prev=1)
#4(weight=4,prev=3)
#5(weight=3,prev=2)
#6(weight=5,prev=5)
#7(weight=5,prev=4)
#8(weight=6,prev=7)

loop #2
#1(weight=0,prev=L)
#2(weight=2,prev=1)
#3(weight=2,prev=1)
#4(weight=4,prev=3)
#5(weight=3,prev=2)
#6(weight=5,prev=5)
#7(weight=5,prev=4)
#8(weight=6,prev=7)

Stop, no changes.


5.2)

Prim:
Start at 7
Connected 4 from 7 cost: 1
Connected 8 from 7 cost: 1
Connected 3 from 4 cost: 2
Connected 1 from 3 cost: 2
Connected 2 from 1 cost: 2
Connected 5 from 2 cost: 1
Connected 6 from 5 cost: 2

Kruskal:
Sorted links:
L1[ 7, 8, 1 ],
L2[ 2, 5, 1 ],
L3[ 4, 7, 1 ],
L4[ 1, 2, 2 ],
L5[ 3, 4, 2 ],
L6[ 5, 6, 2 ],
L7[ 1, 3, 2 ],
L8[ 4, 6, 3 ],
L9[ 3, 5, 5 ],
L10[ 2, 4, 7 ],
L11[ 5, 7, 8 ],
L12[ 6, 8, 9 ]

add L1
add L2
add L3
add L4
add L5
add L6 
add L7
Stop, fully spanned

5.3)
Prim:
min_degree = 2
avg_degree = 1.75
max_degree = 28
edge_connectivity = 1
vertex_connectivity = 1

Kruskal:
min_degree = 2
avg_degree = 1.75
max_degree = 28

edge_connectivity = 1
vertex_connectivity = 1